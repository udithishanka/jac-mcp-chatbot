import from mtllm.llms {OpenAI}
import from rag {RagEngine, LightRagEngine}
import os;
import base64;
import requests;

glob rag_engine:RagEngine = RagEngine();

glob light_engine: LightRagEngine = LightRagEngine();

glob llm = OpenAI(model_name='gpt-4o');

glob SERPER_API_KEY: str = os.getenv('SERPER_API_KEY', '');

obj WebSearch {
    has api_key: str = SERPER_API_KEY;
    has base_url: str = "https://google.serper.dev/search";

    def search(query: str) {
        headers = {"X-API-KEY": self.api_key, "Content-Type": "application/json"};
        payload = {"q": query};
        resp = requests.post(self.base_url, headers=headers, json=payload);
        if resp.status_code == 200 {
            data = resp.json();
            summary = "";
            results = data.get("organic", []) if isinstance(data, dict) else [];
            for r in results[:3] {
                summary += f"{r.get('title', '')}: {r.get('link', '')}\n";
                if r.get('snippet') {
                    summary += f"{r['snippet']}\n";
                }
            }
            return summary;
        }
        return f"Serper request failed: {resp.status_code}";
    }
}

glob web_search: WebSearch = WebSearch();

node Session {
    has id: str;
    has chat_history: list[dict];
    has status: int = 1;

    def respond(message:str, chat_history:str, agent_role:str,  context:str) -> str by llm();
}


walker interact {
    has message: str;
    has session_id: str;

    can init_session with `root entry {
         visit [-->](`?Session)(?id == self.session_id) else {
            session_node = here ++> Session(id=self.session_id, chat_history=[], status=1);
            print("Session Node Created");

            visit session_node;
        }
    }

    can chat with Session entry {
        here.chat_history.append({"role": "user", "content": self.message});
        docs = rag_engine.get_from_chroma(query=self.message);
        web = web_search.search(query=self.message);
        lr_answer = light_engine.query(self.message);
        context = {"docs": docs, "web": web, "light_rag": lr_answer};
        response = here.respond(
            message=self.message,
            chat_history=here.chat_history,
            agent_role="You are a conversation agent designed to help users with their queries based on the documents provided and web search results",
            context=context
        );

        here.chat_history.append({"role": "assistant", "content": response});

        report {"response": response};  
    }
}

walker upload_pdf {
    has file_name: str;
    has file_data: str;

    can save_doc with `root entry {
        if not os.path.exists(rag_engine.file_path) {
            os.makedirs(rag_engine.file_path);
        }
        file_path = os.path.join(rag_engine.file_path, self.file_name);
        data = base64.b64decode(self.file_data.encode('utf-8'));
        with open(file_path, 'wb') as f {
            f.write(data);
        }
        rag_engine.add_file(file_path);
        light_engine.add_file(file_path);
        report {"status": "uploaded"};
    }
}




